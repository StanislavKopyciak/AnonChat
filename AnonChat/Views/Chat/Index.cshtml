@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewBag.Title = "Анонімний чат";
    var matchId = ViewBag.MatchId;
    var userId = HttpContextAccessor.HttpContext.Session.GetInt32("UserId");
}
<script>
    const matchId = '@matchId';
    const userId = '@userId';
</script>

<div class="container chat-container">
    <h1>Анонімний чат</h1>

    <div class="chat-window" id="chatWindow">
    </div>

    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Введіть повідомлення..." />
        <button id="sendBtn">Відправити</button>
        <button id="cancelBtn">Скасувати</button>
    </div>
</div>

<style>
    .chat-container {
        max-width: 600px;
        margin: 30px auto;
        font-family: Arial, sans-serif;
        display: flex;
        flex-direction: column;
    }

    .chat-window {
        border: 1px solid #ccc;
        height: 400px;
        overflow-y: auto;
        padding: 10px;
        background-color: #f9f9f9;
        margin-bottom: 10px;
        border-radius: 8px;
    }

    .message {
        padding: 8px 12px;
        margin: 5px 0;
        border-radius: 20px;
        max-width: 70%;
        clear: both;
    }

    .message.sent {
        background-color: #4caf50;
        color: white;
        margin-left: auto;
    }

    .message.received {
        background-color: #e0e0e0;
        color: black;
        margin-right: auto;
    }

    .chat-input {
        display: flex;
        gap: 10px;
    }

    .chat-input input {
        flex: 1;
        padding: 10px;
        font-size: 16px;
        border-radius: 20px;
        border: 1px solid #ccc;
    }

    .chat-input button {
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 20px;
        border: none;
        background-color: #4caf50;
        color: white;
        cursor: pointer;
    }

    .chat-input button:hover {
        background-color: #45a049;
    }
</style>

<script>
    async function loadMessages() {
        const res = await fetch(`/Chat/GetMessages?matchId=${matchId}`);
        const data = await res.json();
        if (data.success) {
            const chatWindow = document.getElementById('chatWindow');
            chatWindow.innerHTML = data.messages.map(m =>
                `<div class="message ${m.senderId == userId ? "sent" : "received"}">
                    ${m.text}
                </div>`
            ).join('');
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }
    }

    document.getElementById('sendBtn').onclick = async () => {
        const text = document.getElementById('messageInput').value;
        await fetch('/Chat/SendMessage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ matchId, text })
        });
        document.getElementById('messageInput').value = '';
        loadMessages();
    };

        document.getElementById('cancelBtn').onclick = async () => {
        const res = await fetch('/Chat/CancelChat?matchId=' + matchId, {
            method: 'POST'
        });
        const data = await res.json();
        if (data.success && data.redirectUrl) {
            window.location.href = data.redirectUrl;
        }
    };

    setInterval(loadMessages, 2000);
    loadMessages();

    setInterval(async () => {
        const res = await fetch(`/Chat/CheckCompanion?matchId=${matchId}`);
        const data = await res.json();
        if (!data.success && data.redirectUrl) {
            window.location.href = data.redirectUrl;
        }
    }, 5000);
</script>
